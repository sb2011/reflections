What happens when you initialize a repository? Why do you need to do it?

The files in the directory are marked as "untracked". The .git folder is created.
Initializing a repository is required to create a HEAD pointer and to enable us to track the history of files.


How is the staging area different from the working directory and the repository? What value do you think it offers?

Working directory contains local changes. Repository contains latest committed version of the files and the history of changes of the files. Staging area helps us organize our commits better.


How can you use the staging area to make sure you have one commit per logical change?

Add to the staging area only the files related to that particular change. Keep the unrelated, changed files in the working directory and stage them after committing the files staged earlier.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If I want to work on a major feature and also be able to work on quick, urgent code fixes, I can create a branch for the new feature and go back to the original branch to just fix bugs quickly. I could work on multiple new features, each on a different branch.


How do the diagrams help you visualize the branch structure?

They convey to us which commit is the parent of which other commit(s). This helps us visualize the repository tree while branching, committing and merging. We would also know better which commits would be retained or lost if we carried out some operation.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The resultant file contains content merged from both branches. We can easily view the commits and understand the purpose of the branches and see which commit belongs to which branch, if the commits and merges are represented using diagrams.